@model Test_Sitemap.Models.WebSite
<h2 class="text-center">Site Map</h2>
<input id="number" name="@ViewBag.Watch" type="hidden" value="@ViewBag.Watch" />
<div class="container">
    <canvas id="Chart"></canvas>
</div>

<div class="col-md-12">

    @if (Model != null)
    {

        <div>
            
            <table class="table table-info table-hover">
                <thead class="thead-dark col-md-12">
                    <tr>
                        <th class="">URLs</th>
                        <th colspan="3" class="">Page speed</th>
                    </tr>
                </thead>
                @foreach (var page in Model.Pages.OrderByDescending(s=>s.MaxSpeed))
                {
                    <tbody class=" col-md-12">
                        <tr>
                            <td class="col-md-6" id="url">@page.UrlSite</td>
                            <td class="col-md-1" id="Min_Speed">Min. @page.MinSpeed</td>
                            <td class="col-md-1" id="Avg_Speed">Avg. @((page.MinSpeed + page.MaxSpeed) / 2)</td>
                            <td class="col-md-1" id="Max_Speed">Max. @page.MaxSpeed</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div><br />
    }
</div>


@Scripts.Render("~/Scripts/Chart.min.js")
@Scripts.Render("~/Scripts/Chart.js")
<script>
    var res = document.getElementById("number");
    var ctx = document.getElementById('Chart').getContext('2d');
    var chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
            labels: ['0', '100'],
            datasets: [{
                label: 'Speed Website',
                backgroundColor: 'rgb(255, 203, 219)',
                borderColor: 'rgb(255, 99, 132)',
                data: [0, res.value]
            }]
        },

        // Configuration options go here
        options: {}
    });

</script>
